# ===============================================
# SCRIPT DE DEBUG ANTES DO DEPLOY
# ===============================================

Write-Host "üîç INICIANDO DEBUG DOS ARQUIVOS LOCAIS" -ForegroundColor Cyan
Write-Host "=====================================`n" -ForegroundColor Cyan

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "docker-compose.yml")) {
    Write-Host "‚ùå Erro: Execute este script a partir da raiz do projeto" -ForegroundColor Red
    exit 1
}

Write-Host "üìã VERIFICA√á√ïES GERAIS" -ForegroundColor Yellow
Write-Host "=====================`n" -ForegroundColor Yellow

# 1. Verificar arquivos principais
$MAIN_FILES = @(
    ".env",
    "docker-compose.yml", 
    "deploy-contabo.sh"
)

foreach ($file in $MAIN_FILES) {
    if (Test-Path $file) {
        $size = (Get-Item $file).Length
        Write-Host "‚úÖ $file - Tamanho: $size bytes" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file - ARQUIVO FALTANDO!" -ForegroundColor Red
    }
}

Write-Host "`nüìÅ VERIFICA√á√ïES POR SERVI√áO" -ForegroundColor Yellow
Write-Host "===========================`n" -ForegroundColor Yellow

# 2. Verificar servi√ßos
$SERVICES = @("backend", "worker", "frontend")

foreach ($service in $SERVICES) {
    Write-Host "üîß Verificando $service..." -ForegroundColor Cyan
    
    # Package.json
    $packagePath = "$service/package.json"
    if (Test-Path $packagePath) {
        Write-Host "  ‚úÖ package.json encontrado" -ForegroundColor Green
        
        # Verificar node_modules
        $nodeModulesPath = "$service/node_modules"
        if (Test-Path $nodeModulesPath) {
            $count = (Get-ChildItem $nodeModulesPath -Directory).Count
            Write-Host "  ‚úÖ node_modules ($count pacotes)" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  node_modules n√£o encontrado" -ForegroundColor Yellow
        }
    } else {
        Write-Host "  ‚ùå package.json FALTANDO!" -ForegroundColor Red
    }
    
    # Dockerfile
    $dockerPath = "$service/Dockerfile"
    if (Test-Path $dockerPath) {
        Write-Host "  ‚úÖ Dockerfile encontrado" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Dockerfile FALTANDO!" -ForegroundColor Red
    }
    
    # Diret√≥rio src
    $srcPath = "$service/src"
    if (Test-Path $srcPath) {
        $srcFiles = (Get-ChildItem $srcPath -Recurse -File).Count
        Write-Host "  ‚úÖ Diret√≥rio src ($srcFiles arquivos)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Diret√≥rio src FALTANDO!" -ForegroundColor Red
    }
    
    Write-Host ""
}

Write-Host "üåê VERIFICA√á√ïES DE CONFIGURA√á√ÉO" -ForegroundColor Yellow
Write-Host "==============================`n" -ForegroundColor Yellow

# 3. Verificar .env
if (Test-Path ".env") {
    Write-Host "üîë Verificando vari√°veis do .env..." -ForegroundColor Cyan
    
    $envContent = Get-Content ".env" -Raw
    
    $REQUIRED_VARS = @(
        "SUPABASE_URL",
        "SUPABASE_SERVICE_ROLE_KEY", 
        "WASABI_ACCESS_KEY",
        "WASABI_SECRET_KEY",
        "WASABI_BUCKET",
        "PUBLIC_BACKEND_URL",
        "PUBLIC_WORKER_URL",
        "PUBLIC_FRONTEND_URL"
    )
    
    foreach ($var in $REQUIRED_VARS) {
        if ($envContent -match "$var=(.+)") {
            $value = $Matches[1].Substring(0, [Math]::Min(20, $Matches[1].Length))
            Write-Host "  ‚úÖ $var = $value..." -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå $var - VARI√ÅVEL FALTANDO!" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ùå Arquivo .env n√£o encontrado!" -ForegroundColor Red
}

Write-Host "`nüê≥ VERIFICA√á√ïES DOCKER" -ForegroundColor Yellow
Write-Host "=====================`n" -ForegroundColor Yellow

# 4. Verificar Docker Compose
if (Test-Path "docker-compose.yml") {
    Write-Host "üîß Verificando docker-compose.yml..." -ForegroundColor Cyan
    
    $composeContent = Get-Content "docker-compose.yml" -Raw
    
    $REQUIRED_SERVICES = @("backend", "worker", "frontend", "nginx", "srs")
    
    foreach ($service in $REQUIRED_SERVICES) {
        if ($composeContent -match "^\s*${service}:") {
            Write-Host "  ‚úÖ Servi√ßo $service configurado" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Servi√ßo $service FALTANDO!" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ùå docker-compose.yml n√£o encontrado!" -ForegroundColor Red
}

Write-Host "`nüìä VERIFICA√á√ïES DE TAMANHO" -ForegroundColor Yellow
Write-Host "=========================`n" -ForegroundColor Yellow

# 5. Verificar tamanhos dos diret√≥rios
$DIRECTORIES = @("backend", "worker", "frontend", "nginx", "streaming-server")

foreach ($dir in $DIRECTORIES) {
    if (Test-Path $dir) {
        $size = (Get-ChildItem $dir -Recurse -File | Measure-Object -Property Length -Sum).Sum
        $sizeMB = [Math]::Round($size / 1MB, 2)
        Write-Host "üìÅ $dir - $sizeMB MB" -ForegroundColor Cyan
    }
}

Write-Host "`nüéØ RESUMO DO DEBUG" -ForegroundColor Yellow
Write-Host "==================`n" -ForegroundColor Yellow

# 6. Contagem final
$totalFiles = (Get-ChildItem -Recurse -File -Exclude "node_modules", ".git").Count
$totalSize = (Get-ChildItem -Recurse -File -Exclude "node_modules", ".git" | Measure-Object -Property Length -Sum).Sum
$totalSizeMB = [Math]::Round($totalSize / 1MB, 2)

Write-Host "üìà Total de arquivos: $totalFiles" -ForegroundColor Cyan
Write-Host "üíæ Tamanho total (sem node_modules): $totalSizeMB MB" -ForegroundColor Cyan

Write-Host "`n‚úÖ DEBUG CONCLU√çDO!" -ForegroundColor Green
Write-Host "==================`n" -ForegroundColor Green

Write-Host "üöÄ Para fazer o deploy agora, execute:" -ForegroundColor Yellow
Write-Host "   .\scripts\restaurar-servidor.ps1" -ForegroundColor Gray

Write-Host "`n‚ö†Ô∏è  IMPORTANTE:" -ForegroundColor Yellow
Write-Host "   - Verifique se todas as verifica√ß√µes passaram" -ForegroundColor Gray
Write-Host "   - Confirme se as URLs est√£o corretas no .env" -ForegroundColor Gray
Write-Host "   - Certifique-se de que n√£o h√° erros cr√≠ticos acima" -ForegroundColor Gray 