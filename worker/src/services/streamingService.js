const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Configurar caminho do FFmpeg usando ffmpeg-static
const ffmpegStatic = require('ffmpeg-static');
const ffmpegPath = ffmpegStatic;

class StreamingService {
  constructor() {
    this.activeStreams = new Map(); // cameraId -> process
    this.streamDirectory = path.join(__dirname, '../../streams');
    this.ensureStreamDirectory();
  }

  ensureStreamDirectory() {
    if (!fs.existsSync(this.streamDirectory)) {
      fs.mkdirSync(this.streamDirectory, { recursive: true });
      console.log('üìÅ Diret√≥rio de streams criado:', this.streamDirectory);
    }
  }

  /**
   * Inicia streaming HLS para uma c√¢mera RTSP/RTMP
   * @param {string} cameraId - ID da c√¢mera
   * @param {string} inputUrl - URL RTSP ou RTMP da c√¢mera
   * @param {Object} options - Op√ß√µes de streaming
   * @returns {Promise} Promise com resultado da opera√ß√£o
   */
  async startHLSStream(cameraId, inputUrl, options = {}) {
    try {
      console.log(`üé• Iniciando stream HLS para c√¢mera ${cameraId}`);
      console.log(`üì° URL de entrada: ${inputUrl}`);
      
      // Verificar se FFmpeg est√° dispon√≠vel
      if (!fs.existsSync(ffmpegPath)) {
        throw new Error('FFmpeg n√£o encontrado. Instale o FFmpeg para usar streams de c√¢meras.');
      }
      
      console.log(`üîß Usando FFmpeg: ${ffmpegPath}`);
      console.log(`üé• Conectando na c√¢mera: ${inputUrl}`);
      
      // Detectar protocolo
      const isRTMP = inputUrl.toLowerCase().startsWith('rtmp://');
      const isRTSP = inputUrl.toLowerCase().startsWith('rtsp://');
      
      if (!isRTMP && !isRTSP) {
        throw new Error('URL deve come√ßar com rtsp:// ou rtmp://');
      }
      
      console.log(`üîç Protocolo detectado: ${isRTMP ? 'RTMP' : 'RTSP'}`);
      
      // Obter configura√ß√µes de qualidade
      const quality = options.quality || 'medium';
      const qualityConfig = this.getQualityConfig(quality);
      console.log(`üéØ Configura√ß√µes de qualidade (${quality}):`, qualityConfig);
      
      // Verificar se j√° existe stream ativo
      if (this.activeStreams.has(cameraId)) {
        console.log(`‚ö†Ô∏è Stream j√° ativo para c√¢mera ${cameraId}, parando o anterior...`);
        this.stopHLSStream(cameraId);
        // Aguardar um pouco para o processo ser morto
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // Criar diret√≥rio espec√≠fico da c√¢mera
      const cameraStreamDir = path.join(this.streamDirectory, cameraId);
      if (!fs.existsSync(cameraStreamDir)) {
        fs.mkdirSync(cameraStreamDir, { recursive: true });
      }

      // Configura√ß√µes do FFmpeg para HLS
      const outputPath = path.join(cameraStreamDir, 'stream.m3u8');
      const segmentPath = path.join(cameraStreamDir, 'segment%03d.ts');

      // Configurar argumentos baseados no protocolo
      let ffmpegArgs;
      
      if (isRTMP) {
        console.log('üî¥ Configurando FFmpeg para RTMP...');
        ffmpegArgs = [
          '-i', inputUrl,
          '-c:v', 'libx264',
          '-preset', 'ultrafast',
          '-crf', '28',
          '-maxrate', qualityConfig.maxrate,
          '-bufsize', qualityConfig.bufsize,
          '-g', '30',
          '-r', qualityConfig.framerate,
          '-s', qualityConfig.resolution,
          '-threads', '2',
          '-an', // Sem √°udio para simplificar
          '-f', 'hls',
          '-hls_time', '2',
          '-hls_list_size', '3',
          '-hls_flags', 'delete_segments',
          '-hls_segment_filename', segmentPath,
          '-y',
          outputPath
        ];
      } else if (isRTSP) {
        console.log('üîµ Configurando FFmpeg para RTSP...');
        ffmpegArgs = [
          '-rtsp_transport', 'tcp', // Apenas para RTSP
          '-timeout', '10000000',
          '-i', inputUrl,
          '-c:v', 'libx264',
          '-preset', 'ultrafast',
          '-crf', '28',
          '-maxrate', qualityConfig.maxrate,
          '-bufsize', qualityConfig.bufsize,
          '-g', '30',
          '-r', qualityConfig.framerate,
          '-s', qualityConfig.resolution,
          '-threads', '2',
          '-an', // Sem √°udio para simplificar
          '-f', 'hls',
          '-hls_time', '2',
          '-hls_list_size', '3',
          '-hls_flags', 'delete_segments',
          '-hls_segment_filename', segmentPath,
          '-y',
          outputPath
        ];
      }

      console.log('üöÄ Executando FFmpeg:', ffmpegPath, ffmpegArgs.join(' '));

      // Iniciar processo FFmpeg
      const ffmpegProcess = spawn(ffmpegPath, ffmpegArgs);

      // Armazenar informa√ß√µes do stream
      this.activeStreams.set(cameraId, {
        process: ffmpegProcess,
        startTime: new Date(),
        inputUrl,
        outputPath,
        status: 'starting',
        lastHealthCheck: new Date(),
        restartCount: 0,
        protocol: isRTMP ? 'RTMP' : 'RTSP',
        quality: quality,
        qualityConfig: qualityConfig
      });

      // Handlers do processo
      ffmpegProcess.stdout.on('data', (data) => {
        console.log(`üì∫ FFmpeg stdout [${cameraId}]:`, data.toString());
      });

      ffmpegProcess.stderr.on('data', (data) => {
        const output = data.toString();
        console.log(`üì∫ FFmpeg stderr [${cameraId}]:`, output);
        
        // Detectar quando o stream est√° funcionando - melhorar as palavras-chave
        if (output.includes('Opening') || 
            output.includes('Stream mapping') || 
            output.includes('muxer') ||
            output.includes('hls_init') ||
            output.includes('segment') ||
            output.includes('Output #0')) {
          const streamInfo = this.activeStreams.get(cameraId);
          if (streamInfo) {
            streamInfo.status = 'running';
            this.activeStreams.set(cameraId, streamInfo);
            console.log(`üü¢ Stream status atualizado para 'running' [${cameraId}]`);
          }
        }
      });

      ffmpegProcess.on('close', (code) => {
        console.log(`üèÅ FFmpeg process encerrado [${cameraId}] com c√≥digo:`, code);
        if (code !== 0) {
          console.error(`‚ùå FFmpeg encerrou com erro [${cameraId}] c√≥digo: ${code}`);
        }
        this.activeStreams.delete(cameraId);
        
        // Limpar arquivos do stream
        this.cleanupStreamFiles(cameraId);
      });

      ffmpegProcess.on('error', (error) => {
        console.error(`‚ùå Erro no FFmpeg [${cameraId}]:`, error);
        this.activeStreams.delete(cameraId);
      });

      // Log do PID do processo
      console.log(`üîß FFmpeg PID [${cameraId}]: ${ffmpegProcess.pid}`);

      // Aguardar que o arquivo m3u8 seja criado (at√© 10 segundos)
      let attempts = 0;
      const maxAttempts = 20; // 20 tentativas de 0.5s = 10 segundos
      
      console.log(`‚è≥ Aguardando cria√ß√£o do arquivo m3u8: ${outputPath}`);
      
      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 500));
        attempts++;
        
        console.log(`üîç Tentativa ${attempts}/${maxAttempts} - Verificando arquivo: ${outputPath}`);
        
        if (fs.existsSync(outputPath)) {
          console.log(`‚úÖ Arquivo m3u8 criado: ${outputPath}`);
          break;
        }
        
        // Verificar se o processo ainda est√° rodando
        if (!this.activeStreams.has(cameraId)) {
          console.log(`‚ùå Stream removido da lista ativa durante aguardo`);
          throw new Error('Processo FFmpeg encerrou antes de criar o arquivo HLS');
        }
        
        // Log do status do processo
        const streamInfo = this.activeStreams.get(cameraId);
        if (streamInfo && streamInfo.process) {
          console.log(`üìä Status do processo FFmpeg: PID ${streamInfo.process.pid}, killed: ${streamInfo.process.killed}`);
        }
      }

      if (!fs.existsSync(outputPath)) {
        console.log(`‚ùå Timeout: arquivo m3u8 n√£o foi criado em ${maxAttempts * 0.5} segundos`);
        console.log(`üîÑ Tentando solu√ß√£o alternativa com snapshots...`);
        
        // Fallback: criar stream usando snapshots
        return await this.createSnapshotBasedStream(cameraId, inputUrl, cameraStreamDir);
      }

      const streamInfo = this.activeStreams.get(cameraId);
      if (streamInfo) {
        streamInfo.status = 'running';
        this.activeStreams.set(cameraId, streamInfo);
      }

      console.log(`‚úÖ Stream HLS iniciado com sucesso para c√¢mera ${cameraId}`);

      return {
        success: true,
        message: 'Stream HLS iniciado com sucesso',
        hlsUrl: this.getHLSUrl(cameraId),
        streamInfo: {
          cameraId,
          status: 'running',
          startTime: new Date()
        }
      };

    } catch (error) {
      console.error(`‚ùå Erro ao iniciar stream HLS [${cameraId}]:`, error);
      
      // Fallback final: tentar modo simulado se tudo falhar
      console.log(`üîÑ Tentando modo simulado como fallback final...`);
      try {
        return await this.createSimulatedStream(cameraId, inputUrl, options);
      } catch (fallbackError) {
        console.error(`‚ùå Erro no fallback simulado:`, fallbackError);
        return {
          success: false,
          message: 'Falha ao iniciar stream HLS',
          error: error.message
        };
      }
    }
  }

  /**
   * Cria um stream HLS baseado em snapshots como fallback
   * @param {string} cameraId - ID da c√¢mera
   * @param {string} inputUrl - URL RTSP ou RTMP da c√¢mera
   * @param {string} outputDir - Diret√≥rio de sa√≠da
   * @returns {Promise} Promise com resultado da opera√ß√£o
   */
  async createSnapshotBasedStream(cameraId, inputUrl, outputDir) {
    try {
      console.log(`üì∏ Criando stream baseado em snapshots para c√¢mera ${cameraId}`);
      
      // Criar arquivo m3u8 inicial
      const m3u8Content = `#EXTM3U
#EXT-X-VERSION:3
#EXT-X-TARGETDURATION:3
#EXT-X-MEDIA-SEQUENCE:0
#EXT-X-PLAYLIST-TYPE:EVENT
`;
      
      const outputPath = path.join(outputDir, 'stream.m3u8');
      fs.writeFileSync(outputPath, m3u8Content);
      
      // Configurar captura de snapshots em intervalos
      let sequenceNumber = 0;
      const snapshotInterval = setInterval(async () => {
        try {
          const segmentName = `segment${sequenceNumber.toString().padStart(3, '0')}.jpg`;
          const segmentPath = path.join(outputDir, segmentName);
          
          // Capturar snapshot usando FFmpeg
          const snapshotArgs = [
            '-i', inputUrl,
            '-rtsp_transport', 'tcp',
            '-frames:v', '1',
            '-f', 'image2',
            '-y',
            segmentPath
          ];
          
          const snapshotProcess = spawn(ffmpegPath, snapshotArgs);
          
          snapshotProcess.on('close', (code) => {
            if (code === 0 && fs.existsSync(segmentPath)) {
              // Atualizar arquivo m3u8
              const updatedM3u8 = `#EXTM3U
#EXT-X-VERSION:3
#EXT-X-TARGETDURATION:3
#EXT-X-MEDIA-SEQUENCE:${Math.max(0, sequenceNumber - 2)}
#EXT-X-PLAYLIST-TYPE:EVENT
${sequenceNumber >= 2 ? `#EXTINF:3.0,\nsegment${(sequenceNumber-2).toString().padStart(3, '0')}.jpg\n` : ''}
${sequenceNumber >= 1 ? `#EXTINF:3.0,\nsegment${(sequenceNumber-1).toString().padStart(3, '0')}.jpg\n` : ''}
#EXTINF:3.0,
${segmentName}
`;
              fs.writeFileSync(outputPath, updatedM3u8);
              
              // Remover segmentos antigos (manter apenas 3)
              if (sequenceNumber >= 3) {
                const oldSegment = path.join(outputDir, `segment${(sequenceNumber-3).toString().padStart(3, '0')}.jpg`);
                if (fs.existsSync(oldSegment)) {
                  fs.unlinkSync(oldSegment);
                }
              }
            }
          });
          
          sequenceNumber++;
        } catch (error) {
          console.error(`‚ùå Erro ao capturar snapshot [${cameraId}]:`, error);
        }
      }, 3000); // Capturar a cada 3 segundos
      
      // Armazenar informa√ß√µes do stream alternativo
      this.activeStreams.set(cameraId, {
        type: 'snapshot',
        interval: snapshotInterval,
        startTime: new Date(),
        inputUrl,
        outputPath,
        status: 'running'
      });
      
      console.log(`‚úÖ Stream baseado em snapshots iniciado para c√¢mera ${cameraId}`);
      
      return {
        success: true,
        message: 'Stream HLS iniciado com snapshots (modo compatibilidade)',
        hlsUrl: this.getHLSUrl(cameraId),
        streamInfo: {
          cameraId,
          status: 'running',
          startTime: new Date(),
          type: 'snapshot'
        }
      };
      
    } catch (error) {
      console.error(`‚ùå Erro ao criar stream baseado em snapshots [${cameraId}]:`, error);
      throw error;
    }
  }

  /**
   * Para o streaming HLS de uma c√¢mera
   * @param {string} cameraId - ID da c√¢mera
   * @returns {Object} Resultado da opera√ß√£o
   */
  stopHLSStream(cameraId) {
    try {
      console.log(`üõë Parando stream HLS para c√¢mera ${cameraId}`);
      
      const streamInfo = this.activeStreams.get(cameraId);
      if (!streamInfo) {
        return {
          success: false,
          message: 'Stream n√£o encontrado ou j√° parado'
        };
      }

      // Verificar tipo de stream e parar adequadamente
      if (streamInfo.type === 'snapshot') {
        // Parar interval de snapshots
        if (streamInfo.interval) {
          clearInterval(streamInfo.interval);
        }
      } else {
        // Matar processo FFmpeg
        if (streamInfo.process && streamInfo.process.pid) {
          console.log(`üîß Matando processo FFmpeg PID: ${streamInfo.process.pid}`);
          
          try {
            // No Windows, usar taskkill para for√ßa total
            if (process.platform === 'win32') {
              const { execSync } = require('child_process');
              execSync(`taskkill /F /PID ${streamInfo.process.pid}`, { stdio: 'ignore' });
              console.log(`‚úÖ Processo FFmpeg ${streamInfo.process.pid} morto via taskkill`);
            } else {
              // Linux/Mac - usar SIGKILL em vez de SIGTERM
              streamInfo.process.kill('SIGKILL');
              console.log(`‚úÖ Processo FFmpeg ${streamInfo.process.pid} morto via SIGKILL`);
            }
          } catch (killError) {
            console.warn(`‚ö†Ô∏è Erro ao matar processo ${streamInfo.process.pid}:`, killError.message);
            // Continuar mesmo se der erro
          }
        }
      }
      
      // Remover da lista de streams ativos
      this.activeStreams.delete(cameraId);
      
      // Limpar arquivos
      this.cleanupStreamFiles(cameraId);

      console.log(`‚úÖ Stream HLS parado para c√¢mera ${cameraId}`);
      
      return {
        success: true,
        message: 'Stream HLS parado com sucesso'
      };

    } catch (error) {
      console.error(`‚ùå Erro ao parar stream HLS [${cameraId}]:`, error);
      return {
        success: false,
        error: error.message,
        message: 'Falha ao parar stream HLS'
      };
    }
  }

  /**
   * Obter status de um stream
   * @param {string} cameraId - ID da c√¢mera
   * @returns {Object} Status do stream
   */
  getStreamStatus(cameraId) {
    const streamInfo = this.activeStreams.get(cameraId);
    
    if (!streamInfo) {
      return {
        active: false,
        status: 'stopped'
      };
    }

    return {
      active: true,
      status: streamInfo.status,
      startTime: streamInfo.startTime,
      rtspUrl: streamInfo.inputUrl,
      hlsUrl: this.getHLSUrl(cameraId),
      uptime: Date.now() - streamInfo.startTime.getTime()
    };
  }

  /**
   * Listar todos os streams ativos
   * @returns {Array} Lista de streams ativos
   */
  getActiveStreams() {
    const streams = [];
    
    for (const [cameraId, streamInfo] of this.activeStreams) {
      streams.push({
        cameraId,
        status: streamInfo.status,
        startTime: streamInfo.startTime,
        hlsUrl: this.getHLSUrl(cameraId),
        uptime: Date.now() - streamInfo.startTime.getTime()
      });
    }

    return streams;
  }

  /**
   * Gerar URL HLS para uma c√¢mera
   * @param {string} cameraId - ID da c√¢mera
   * @returns {string} URL HLS
   */
  getHLSUrl(cameraId) {
    // Usar URL relativa que ser√° resolvida atrav√©s do nginx proxy
    return `/hls/${cameraId}/stream.m3u8`;
  }

  /**
   * Limpar arquivos de stream de uma c√¢mera
   * @param {string} cameraId - ID da c√¢mera
   */
  cleanupStreamFiles(cameraId) {
    try {
      const cameraStreamDir = path.join(this.streamDirectory, cameraId);
      
      if (fs.existsSync(cameraStreamDir)) {
        const files = fs.readdirSync(cameraStreamDir);
        
        for (const file of files) {
          const filePath = path.join(cameraStreamDir, file);
          fs.unlinkSync(filePath);
        }
        
        fs.rmdirSync(cameraStreamDir);
        console.log(`üóëÔ∏è Arquivos de stream limpos para c√¢mera ${cameraId}`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao limpar arquivos de stream [${cameraId}]:`, error);
    }
  }

  /**
   * Parar todos os streams ativos
   */
  stopAllStreams() {
    console.log('üõë Parando todos os streams ativos...');
    
    for (const cameraId of this.activeStreams.keys()) {
      this.stopHLSStream(cameraId);
    }
    
    // Matar todos os processos FFmpeg √≥rf√£os (Windows)
    if (process.platform === 'win32') {
      try {
        const { execSync } = require('child_process');
        console.log('üîß Matando todos os processos FFmpeg √≥rf√£os...');
        execSync('taskkill /F /IM ffmpeg.exe', { stdio: 'ignore' });
        console.log('‚úÖ Processos FFmpeg √≥rf√£os limpos');
      } catch (error) {
        console.log('‚ÑπÔ∏è Nenhum processo FFmpeg √≥rf√£o encontrado');
      }
    } else {
      // Linux/Mac
      try {
        const { execSync } = require('child_process');
        execSync('pkill -f ffmpeg', { stdio: 'ignore' });
        console.log('‚úÖ Processos FFmpeg √≥rf√£os limpos');
      } catch (error) {
        console.log('‚ÑπÔ∏è Nenhum processo FFmpeg √≥rf√£o encontrado');
      }
    }
    
    console.log('‚úÖ Todos os streams foram parados');
  }

  /**
   * Reinicia um stream problem√°tico
   * @param {string} cameraId - ID da c√¢mera
   * @param {string} inputUrl - URL RTSP ou RTMP da c√¢mera
   */
  async restartStream(cameraId, inputUrl) {
    try {
      console.log(`üîÑ Reiniciando stream para c√¢mera ${cameraId}`);
      
      const streamInfo = this.activeStreams.get(cameraId);
      if (streamInfo) {
        streamInfo.restartCount = (streamInfo.restartCount || 0) + 1;
        // Usar a URL original se n√£o foi fornecida uma nova
        inputUrl = inputUrl || streamInfo.inputUrl;
      }

      // Parar o stream atual
      this.stopHLSStream(cameraId);
      
      // Aguardar um pouco antes de reiniciar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Iniciar novamente
      return await this.startHLSStream(cameraId, inputUrl);
      
    } catch (error) {
      console.error(`‚ùå Erro ao reiniciar stream [${cameraId}]:`, error);
      return {
        success: false,
        error: error.message,
        message: 'Falha ao reiniciar stream'
      };
    }
  }

  /**
   * Obter configura√ß√µes de qualidade para FFmpeg
   * @param {string} quality - Qualidade: 'low', 'medium', 'high', 'ultra', 'mobile'
   * @returns {Object} Configura√ß√µes do FFmpeg
   */
  getQualityConfig(quality) {
    switch (quality) {
      case 'mobile':
        return {
          resolution: '480x360',
          framerate: 8,
          maxrate: '400k',
          bufsize: '800k',
          preset: 'ultrafast',
          crf: 35,
          audioBitrate: '32k',
          description: 'M√≥vel (480x360, 8fps)'
        };
      case 'low':
        return {
          resolution: '480x360',
          framerate: 8,
          maxrate: '500k',
          bufsize: '1000k',
          preset: 'ultrafast',
          crf: 35,
          audioBitrate: '32k',
          description: 'Baixa (480x360, 8fps)'
        };
      case 'medium':
        return {
          resolution: '640x480',
          framerate: 12,
          maxrate: '800k',
          bufsize: '1600k',
          preset: 'ultrafast',
          crf: 32,
          audioBitrate: '48k',
          description: 'M√©dia (640x480, 12fps)'
        };
      case 'high':
        return {
          resolution: '1280x720',
          framerate: 15,
          maxrate: '1500k',
          bufsize: '3000k',
          preset: 'superfast',
          crf: 28,
          audioBitrate: '64k',
          description: 'Alta (720p, 15fps)'
        };
      case 'ultra':
        return {
          resolution: '1920x1080',
          framerate: 20,
          maxrate: '2500k',
          bufsize: '5000k',
          preset: 'fast',
          crf: 25,
          audioBitrate: '96k',
          description: 'Ultra (1080p, 20fps)'
        };
      default:
        return this.getQualityConfig('medium');
    }
  }

  /**
   * Sistema de auto-start para c√¢meras online
   * @param {Array} cameras - Lista de c√¢meras do backend
   */
  async autoStartOnlineCameras(cameras) {
    console.log(`üîÑ Verificando auto-start para ${cameras.length} c√¢meras...`);
    
    for (const camera of cameras) {
      try {
        // Verificar se c√¢mera j√° tem stream ativo
        if (this.activeStreams.has(camera.id)) {
          console.log(`‚úÖ C√¢mera ${camera.name || camera.id} j√° tem stream ativo`);
          
          // Garantir que o status est√° atualizado como online
          await this.updateCameraStatus(camera.id, 'online', this.getHLSUrl(camera.id));
          continue;
        }
        
        // Determinar URL de stream
        let streamUrl = null;
        let protocol = null;
        
        if (camera.rtspUrl && camera.rtspUrl.trim() !== '') {
          streamUrl = camera.rtspUrl;
          protocol = 'RTSP';
        } else if (camera.rtmpUrl && camera.rtmpUrl.trim() !== '') {
          streamUrl = camera.rtmpUrl;
          protocol = 'RTMP';
        }
        
        if (!streamUrl) {
          console.log(`‚ö†Ô∏è C√¢mera ${camera.name || camera.id} n√£o tem URL configurada`);
          await this.updateCameraStatus(camera.id, 'offline');
          continue;
        }
        
        console.log(`üé¨ Tentando iniciar stream para c√¢mera ${camera.name || camera.id} (${protocol}): ${streamUrl}`);
        
        // Iniciar stream
        const result = await this.startHLSStream(camera.id, streamUrl, {
          protocol: protocol,
          quality: camera.quality || 'medium'
        });
        
        if (result.success) {
          console.log(`‚úÖ Stream iniciado com sucesso para c√¢mera ${camera.name || camera.id}`);
          await this.updateCameraStatus(camera.id, 'online', result.hlsUrl);
        } else {
          console.log(`‚ùå Falha ao iniciar stream para c√¢mera ${camera.name || camera.id}: ${result.message}`);
          await this.updateCameraStatus(camera.id, 'offline');
        }
        
      } catch (error) {
        console.error(`‚ùå Erro ao processar c√¢mera ${camera.name || camera.id}:`, error.message);
        await this.updateCameraStatus(camera.id, 'offline');
      }
    }
    
    console.log(`‚úÖ Auto-start conclu√≠do para ${cameras.length} c√¢meras`);
  }

  /**
   * Verifica se uma c√¢mera est√° online
   * @param {Object} camera - Dados da c√¢mera
   * @returns {Promise<boolean>} True se online
   */
  async checkCameraOnline(camera) {
    try {
      const inputUrl = camera.rtspUrl || camera.rtmpUrl;
      if (!inputUrl) return false;
      
      // Para c√¢meras reais, tentar fazer uma verifica√ß√£o r√°pida
      return new Promise((resolve) => {
        const timeoutMs = 5000; // 5 segundos timeout
        let resolved = false;
        
        const timeout = setTimeout(() => {
          if (!resolved) {
            resolved = true;
            resolve(false);
          }
        }, timeoutMs);
        
        // Tentar conectar rapidamente usando FFprobe
        const ffprobeArgs = [
          '-v', 'quiet',
          '-print_format', 'json',
          '-show_format',
          '-i', inputUrl
        ];
        
        const ffprobeProcess = spawn(ffmpegPath.replace('ffmpeg.exe', 'ffprobe.exe'), ffprobeArgs);
        
        ffprobeProcess.on('close', (code) => {
          clearTimeout(timeout);
          if (!resolved) {
            resolved = true;
            resolve(code === 0);
          }
        });
        
        ffprobeProcess.on('error', () => {
          clearTimeout(timeout);
          if (!resolved) {
            resolved = true;
            resolve(false);
          }
        });
      });
      
    } catch (error) {
      console.error(`‚ùå Erro ao verificar status da c√¢mera ${camera.name || camera.id}:`, error.message);
      return false;
    }
  }

  /**
   * Inicializar monitoramento autom√°tico das c√¢meras
   * @param {Function} getCamerasCallback - Fun√ß√£o para obter lista de c√¢meras
   */
  startAutoMonitoring(getCamerasCallback) {
    console.log(`ü§ñ Iniciando monitoramento autom√°tico de c√¢meras...`);
    
    // Executar auto-start inicial ap√≥s 10 segundos
    setTimeout(async () => {
      try {
        const cameras = await getCamerasCallback();
        await this.autoStartOnlineCameras(cameras);
      } catch (error) {
        console.error('‚ùå Erro no auto-start inicial:', error.message);
      }
    }, 10000);
    
    // Executar verifica√ß√£o peri√≥dica a cada 2 minutos
    setInterval(async () => {
      try {
        const cameras = await getCamerasCallback();
        await this.autoStartOnlineCameras(cameras);
      } catch (error) {
        console.error('‚ùå Erro no auto-start peri√≥dico:', error.message);
      }
    }, 120000); // 2 minutos

    // üÜï Health check e reconex√£o autom√°tica a cada 30 segundos
    setInterval(async () => {
      await this.performHealthChecks();
    }, 30000); // 30 segundos
  }

  /**
   * üÜï Realizar verifica√ß√µes de sa√∫de dos streams ativos
   */
  async performHealthChecks() {
    console.log(`üîç Realizando health checks em ${this.activeStreams.size} streams...`);
    
    for (const [cameraId, streamInfo] of this.activeStreams) {
      try {
        const isHealthy = await this.checkStreamHealth(cameraId, streamInfo);
        
        if (!isHealthy) {
          console.log(`‚ö†Ô∏è Stream n√£o saud√°vel detectado [${cameraId}], iniciando reconex√£o...`);
          await this.reconnectStream(cameraId, streamInfo);
        } else {
          // Atualizar timestamp do √∫ltimo health check
          streamInfo.lastHealthCheck = new Date();
          streamInfo.consecutiveFailures = 0;
          this.activeStreams.set(cameraId, streamInfo);
        }
        
      } catch (error) {
        console.error(`‚ùå Erro no health check [${cameraId}]:`, error.message);
      }
    }
  }

  /**
   * üÜï Verificar sa√∫de de um stream espec√≠fico
   * @param {string} cameraId - ID da c√¢mera
   * @param {Object} streamInfo - Informa√ß√µes do stream
   * @returns {Promise<boolean>} True se saud√°vel
   */
  async checkStreamHealth(cameraId, streamInfo) {
    try {
      // Verificar se o processo ainda est√° rodando
      if (streamInfo.process && streamInfo.process.killed) {
        console.log(`‚ùå Processo FFmpeg morto [${cameraId}]`);
        return false;
      }

      // Verificar se arquivos HLS est√£o sendo atualizados
      const cameraStreamDir = path.join(this.streamDirectory, cameraId);
      const m3u8Path = path.join(cameraStreamDir, 'stream.m3u8');
      
      if (!fs.existsSync(m3u8Path)) {
        console.log(`‚ùå Arquivo m3u8 n√£o encontrado [${cameraId}]`);
        return false;
      }

      // Verificar se arquivo foi modificado nos √∫ltimos 10 segundos
      const stats = fs.statSync(m3u8Path);
      const lastModified = stats.mtime;
      const now = new Date();
      const timeDiff = (now - lastModified) / 1000; // segundos

      if (timeDiff > 10) {
        console.log(`‚ö†Ô∏è Arquivo m3u8 n√£o atualizado h√° ${timeDiff.toFixed(1)}s [${cameraId}]`);
        return false;
      }

      // Verificar se h√° segmentos recentes
      const content = fs.readFileSync(m3u8Path, 'utf8');
      const segments = content.split('\n').filter(line => line.includes('.ts'));
      
      if (segments.length === 0) {
        console.log(`‚ùå Nenhum segmento encontrado no m3u8 [${cameraId}]`);
        return false;
      }

      // Verificar se √∫ltimo segmento existe e n√£o est√° vazio
      const lastSegment = segments[segments.length - 1];
      const segmentPath = path.join(cameraStreamDir, lastSegment);
      
      if (!fs.existsSync(segmentPath)) {
        console.log(`‚ùå √öltimo segmento n√£o encontrado: ${lastSegment} [${cameraId}]`);
        return false;
      }

      const segmentStats = fs.statSync(segmentPath);
      if (segmentStats.size < 1000) { // Menos de 1KB
        console.log(`‚ö†Ô∏è Segmento muito pequeno: ${segmentStats.size} bytes [${cameraId}]`);
        return false;
      }

      console.log(`‚úÖ Stream saud√°vel [${cameraId}] - √öltimo segmento: ${lastSegment} (${segmentStats.size} bytes)`);
      return true;

    } catch (error) {
      console.error(`‚ùå Erro no health check [${cameraId}]:`, error.message);
      return false;
    }
  }

  /**
   * üÜï Reconectar stream problem√°tico
   * @param {string} cameraId - ID da c√¢mera
   * @param {Object} streamInfo - Informa√ß√µes do stream
   */
  async reconnectStream(cameraId, streamInfo) {
    try {
      console.log(`üîÑ Iniciando reconex√£o autom√°tica [${cameraId}]...`);
      
      // Incrementar contador de falhas consecutivas
      streamInfo.consecutiveFailures = (streamInfo.consecutiveFailures || 0) + 1;
      streamInfo.lastFailure = new Date();
      
      // Limite de tentativas de reconex√£o
      const maxRetries = 5;
      if (streamInfo.consecutiveFailures > maxRetries) {
        console.error(`‚ùå Limite de reconex√µes excedido [${cameraId}] (${streamInfo.consecutiveFailures}/${maxRetries})`);
        console.log(`‚è∏Ô∏è Pausando stream [${cameraId}] por 5 minutos...`);
        
        // Parar o stream e agendar nova tentativa em 5 minutos
        this.stopHLSStream(cameraId);
        
        setTimeout(async () => {
          console.log(`üîÑ Tentativa de reconex√£o agendada [${cameraId}]...`);
          streamInfo.consecutiveFailures = 0;
          await this.startHLSStream(cameraId, streamInfo.inputUrl);
        }, 300000); // 5 minutos
        
        return;
      }

      console.log(`üîÑ Tentativa ${streamInfo.consecutiveFailures}/${maxRetries} de reconex√£o [${cameraId}]`);
      
      // Parar stream atual
      this.stopHLSStream(cameraId);
      
      // Aguardar antes de reconectar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Tentar reconectar
      const result = await this.startHLSStream(cameraId, streamInfo.inputUrl, {
        quality: streamInfo.quality || 'medium',
        reconnection: true,
        attempt: streamInfo.consecutiveFailures
      });
      
      if (result.success) {
        console.log(`‚úÖ Reconex√£o bem-sucedida [${cameraId}]`);
        streamInfo.consecutiveFailures = 0;
        streamInfo.lastReconnection = new Date();
      } else {
        console.error(`‚ùå Falha na reconex√£o [${cameraId}]:`, result.message);
      }
      
    } catch (error) {
      console.error(`‚ùå Erro durante reconex√£o [${cameraId}]:`, error.message);
    }
  }

  /**
   * üÜï Alterar qualidade de um stream ativo
   * @param {string} cameraId - ID da c√¢mera
   * @param {string} newQuality - Nova qualidade
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async changeStreamQuality(cameraId, newQuality) {
    try {
      console.log(`üéØ Alterando qualidade do stream [${cameraId}] para: ${newQuality}`);
      
      const streamInfo = this.activeStreams.get(cameraId);
      if (!streamInfo) {
        return {
          success: false,
          message: 'Stream n√£o encontrado'
        };
      }

      const newQualityConfig = this.getQualityConfig(newQuality);
      console.log(`üîß Nova configura√ß√£o:`, newQualityConfig);

      // Parar stream atual
      this.stopHLSStream(cameraId);
      
      // Aguardar mais tempo para garantir que o stream anterior foi completamente parado
      await new Promise(resolve => setTimeout(resolve, 2000)); // Aumentado de 1000ms para 2000ms
      
      // Reiniciar com nova qualidade
      const result = await this.startHLSStream(cameraId, streamInfo.inputUrl, {
        quality: newQuality,
        qualityChange: true
      });
      
      if (result.success) {
        console.log(`‚úÖ Qualidade alterada com sucesso [${cameraId}] ‚Üí ${newQualityConfig.description}`);
        return {
          success: true,
          message: `Qualidade alterada para ${newQualityConfig.description}`,
          newQuality: newQuality,
          config: newQualityConfig
        };
      } else {
        return {
          success: false,
          message: 'Falha ao reiniciar stream com nova qualidade'
        };
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao alterar qualidade [${cameraId}]:`, error.message);
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * üÜï Obter configura√ß√µes de qualidade dispon√≠veis
   * @returns {Array} Lista de qualidades dispon√≠veis
   */
  getAvailableQualities() {
    return [
      { id: 'mobile', name: 'M√≥vel', ...this.getQualityConfig('mobile') },
      { id: 'low', name: 'Baixa', ...this.getQualityConfig('low') },
      { id: 'medium', name: 'M√©dia', ...this.getQualityConfig('medium') },
      { id: 'high', name: 'Alta', ...this.getQualityConfig('high') },
      { id: 'ultra', name: 'Ultra', ...this.getQualityConfig('ultra') }
    ];
  }

  /**
   * Atualizar status da c√¢mera no banco de dados
   * @param {string} cameraId - ID da c√¢mera
   * @param {string} status - Status da c√¢mera (online/offline)
   * @param {string} hlsUrl - URL HLS (opcional)
   */
  async updateCameraStatus(cameraId, status, hlsUrl = null) {
    try {
      const { supabase } = require('./supabase');
      
      console.log(`üîÑ Atualizando status da c√¢mera ${cameraId}: ${status}`);
      
      const updateData = {
        status: status,
        updatedAt: new Date().toISOString()
      };
      
      // Se fornecida, atualizar tamb√©m a URL HLS
      if (hlsUrl) {
        updateData.hlsUrl = hlsUrl;
        updateData.streamStatus = 'ACTIVE';
      } else if (status === 'offline') {
        updateData.streamStatus = 'INACTIVE';
        updateData.hlsUrl = null;
      }
      
      const { error } = await supabase
        .from('cameras')
        .update(updateData)
        .eq('id', cameraId);
      
      if (error) {
        console.error(`‚ùå Erro ao atualizar status da c√¢mera ${cameraId}:`, error.message);
        return false;
      }
      
      console.log(`‚úÖ Status da c√¢mera ${cameraId} atualizado para: ${status}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå Erro geral ao atualizar status da c√¢mera ${cameraId}:`, error.message);
      return false;
    }
  }
}

// Singleton instance
const streamingService = new StreamingService();

module.exports = streamingService;