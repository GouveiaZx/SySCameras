const WORKER_URL = process.env.WORKER_URL || 'http://localhost:3002';

/**
 * Servi√ßo para comunica√ß√£o com o worker de streaming
 */
class WorkerStreamingService {
  
  /**
   * Inicia stream HLS para uma c√¢mera
   * @param {string} cameraId - ID da c√¢mera
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async startStream(cameraId) {
    try {
      console.log(`üé¨ Solicitando in√≠cio de stream para c√¢mera ${cameraId}`);
      
      const response = await fetch(`${WORKER_URL}/api/streams/start`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ cameraId })
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao iniciar stream');
      }

      console.log(`‚úÖ Stream iniciado com sucesso para c√¢mera ${cameraId}`);
      return result;

    } catch (error) {
      console.error(`‚ùå Erro ao solicitar in√≠cio de stream [${cameraId}]:`, error);
      throw error;
    }
  }

  /**
   * Para stream HLS de uma c√¢mera
   * @param {string} cameraId - ID da c√¢mera
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async stopStream(cameraId) {
    try {
      console.log(`üõë Solicitando parada de stream para c√¢mera ${cameraId}`);
      
      const response = await fetch(`${WORKER_URL}/api/streams/stop`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ cameraId })
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao parar stream');
      }

      console.log(`‚úÖ Stream parado com sucesso para c√¢mera ${cameraId}`);
      return result;

    } catch (error) {
      console.error(`‚ùå Erro ao solicitar parada de stream [${cameraId}]:`, error);
      throw error;
    }
  }

  /**
   * Obt√©m status de um stream
   * @param {string} cameraId - ID da c√¢mera
   * @returns {Promise<Object>} Status do stream
   */
  async getStreamStatus(cameraId) {
    try {
      const response = await fetch(`${WORKER_URL}/api/streams/${cameraId}/status`);
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao obter status do stream');
      }

      return result;

    } catch (error) {
      console.error(`‚ùå Erro ao obter status do stream [${cameraId}]:`, error);
      throw error;
    }
  }

  /**
   * Lista todos os streams ativos
   * @returns {Promise<Object>} Lista de streams ativos
   */
  async getActiveStreams() {
    try {
      const response = await fetch(`${WORKER_URL}/api/streams/active`);
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao listar streams ativos');
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao listar streams ativos:', error);
      throw error;
    }
  }

  /**
   * Obt√©m status geral do worker
   * @returns {Promise<Object>} Status do worker
   */
  async getWorkerStatus() {
    try {
      const response = await fetch(`${WORKER_URL}/api/worker/status`);
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao obter status do worker');
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao obter status do worker:', error);
      throw error;
    }
  }

  /**
   * Inicia streams autom√°ticos para todas as c√¢meras online
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async autoStartStreams() {
    try {
      console.log('üé¨ Solicitando in√≠cio de streams autom√°ticos');
      
      const response = await fetch(`${WORKER_URL}/api/auto-start-streams`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao iniciar streams autom√°ticos');
      }

      console.log('‚úÖ Streams autom√°ticos solicitados com sucesso');
      return result;

    } catch (error) {
      console.error('‚ùå Erro ao solicitar streams autom√°ticos:', error);
      throw error;
    }
  }

  /**
   * Verifica se o worker est√° dispon√≠vel
   * @returns {Promise<boolean>} true se o worker estiver dispon√≠vel
   */
  async isWorkerAvailable() {
    try {
      const response = await fetch(`${WORKER_URL}/health`, {
        timeout: 5000
      });
      
      return response.ok;

    } catch (error) {
      console.error('‚ùå Worker n√£o est√° dispon√≠vel:', error);
      return false;
    }
  }

  /**
   * Inicia stream HLS para uma c√¢mera com URL espec√≠fica
   * @param {string} cameraId - ID da c√¢mera
   * @param {string} streamUrl - URL da c√¢mera (RTSP ou RTMP)
   * @param {Object} options - Op√ß√µes do stream (quality, protocol, etc.)
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async startStreamWithUrl(cameraId, streamUrl, options = {}) {
    try {
      console.log(`üé¨ Solicitando in√≠cio de stream para c√¢mera ${cameraId} com URL espec√≠fica`);
      console.log(`üì° URL: ${streamUrl}`);
      console.log(`‚öôÔ∏è Op√ß√µes:`, options);
      
      const response = await fetch(`${WORKER_URL}/api/streams/start-with-url`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          cameraId, 
          streamUrl,
          options
        })
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Erro ao iniciar stream');
      }

      console.log(`‚úÖ Stream iniciado com sucesso para c√¢mera ${cameraId}`);
      return result;

    } catch (error) {
      console.error(`‚ùå Erro ao solicitar in√≠cio de stream [${cameraId}]:`, error);
      throw error;
    }
  }
}

// Singleton instance
const workerStreamingService = new WorkerStreamingService();

module.exports = workerStreamingService; 