const { supabase } = require('../services/supabase');
const { generateRtmpUrl } = require('../utils/streamingUtils');
const { processCameraStatusChange } = require('./alerts');
const { PrismaClient } = require('@prisma/client');
const workerStreamingService = require('../services/workerStreamingService');

const prisma = new PrismaClient();

/**
 * Lista todas as c√¢meras com base no role do usu√°rio
 * - Admin: todas as c√¢meras
 * - Integrador: c√¢meras que pertencem a ele
 * - Cliente: apenas suas pr√≥prias c√¢meras
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function getCameras(request, reply) {
  try {
    const { role, id: userId } = request.user;
    let cameras = [];
    
    if (role === 'ADMIN') {
      // Admin v√™ todas as c√¢meras
      const { data, error } = await supabase
        .from('cameras')
        .select(`
          *,
          clients:clientId (name, integrators:integratorId (name))
        `);
        
      if (error) throw error;
      cameras = data;
    } 
    else if (role === 'INTEGRATOR') {
      // Integrador v√™ c√¢meras vinculadas a ele
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator) {
        return reply.code(404).send({
          error: 'Integrador n√£o encontrado',
          message: 'Perfil de integrador n√£o encontrado'
        });
      }
      
      const { data, error } = await supabase
        .from('cameras')
        .select(`
          *,
          clients:clientId (name)
        `)
        .eq('integratorId', integrator.id);
        
      if (error) throw error;
      cameras = data;
    } 
    else if (role === 'CLIENT') {
      // Cliente v√™ apenas suas pr√≥prias c√¢meras
      const { data: client } = await supabase
        .from('clients')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!client) {
        return reply.code(404).send({
          error: 'Cliente n√£o encontrado',
          message: 'Perfil de cliente n√£o encontrado'
        });
      }
      
      const { data, error } = await supabase
        .from('cameras')
        .select('*')
        .eq('clientId', client.id);
        
      if (error) throw error;
      cameras = data;
    }
    
    return reply.code(200).send(cameras);
  } catch (error) {
    console.error('Erro ao listar c√¢meras:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel listar as c√¢meras'
    });
  }
}

/**
 * Obt√©m detalhes de uma c√¢mera espec√≠fica
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function getCameraById(request, reply) {
  try {
    const { id } = request.params;
    const { role, id: userId } = request.user;
    
    // Buscar a c√¢mera
    const { data: camera, error } = await supabase
      .from('cameras')
      .select(`
        *,
        clients:clientId (*, integrators:integratorId (*)),
        retention_settings (*),
        camera_streams (*),
        motion_detection_configs (*)
      `)
      .eq('id', id)
      .single();
    
    if (error || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√£o baseada no role
    if (role === 'CLIENT') {
      const { data: client } = await supabase
        .from('clients')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!client || camera.clientId !== client.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para acessar esta c√¢mera'
        });
      }
    } 
    else if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para acessar esta c√¢mera'
        });
      }
    }
    
    return reply.code(200).send(camera);
  } catch (error) {
    console.error('Erro ao buscar c√¢mera:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel buscar os detalhes da c√¢mera'
    });
  }
}

/**
 * Cria uma nova c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function createCamera(request, reply) {
  try {
    const { role, id: userId } = request.user;
    const { name, rtspUrl, rtmpUrl, clientId, type, retentionDays = 7 } = request.body;
    
    console.log('üé• === CRIANDO NOVA C√ÇMERA - DEBUG DETALHADO ===');
    console.log('üë§ Usu√°rio:', { role, userId });
    console.log('üìã Body recebido:', JSON.stringify(request.body, null, 2));
    console.log('üîó URLs extra√≠das:', { rtspUrl, rtmpUrl });
    console.log('üì¶ Outros dados:', { name, clientId, type, retentionDays });
    
    // Valida√ß√µes obrigat√≥rias
    if (!name || !clientId) {
      console.log('‚ùå Valida√ß√£o falhou: dados obrigat√≥rios');
      return reply.code(400).send({
        error: 'Dados obrigat√≥rios',
        message: 'Nome e cliente s√£o obrigat√≥rios'
      });
    }

    // Verificar se pelo menos uma URL foi fornecida
    if (!rtspUrl && !rtmpUrl) {
      console.log('‚ùå Valida√ß√£o falhou: nenhuma URL fornecida');
      return reply.code(400).send({
        error: 'URL obrigat√≥ria',
        message: '√â necess√°rio fornecer pelo menos uma URL RTSP ou RTMP'
      });
    }
    
    // Detectar protocolo baseado na URL fornecida
    const streamUrl = rtspUrl || rtmpUrl;
    const url = streamUrl.toLowerCase();
    
    let cameraData = {
      name,
      clientId,
      type: type || 'IP',
      status: 'offline',
      streamStatus: 'INACTIVE',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    // Salvar URL na coluna correta baseada no protocolo
    if (rtspUrl && url.startsWith('rtsp://')) {
      cameraData.rtspUrl = rtspUrl;
      console.log('üì° C√¢mera RTSP detectada');
    } else if (rtmpUrl && url.startsWith('rtmp://')) {
      cameraData.rtmpUrl = rtmpUrl;
      // WORKAROUND: Como a constraint NOT NULL ainda existe, colocar string vazia em rtspUrl
      cameraData.rtspUrl = '';
      console.log('üì∫ C√¢mera RTMP detectada');
    } else if (rtspUrl) {
      // Se foi fornecido rtspUrl mas n√£o come√ßa com rtsp://
      if (!url.startsWith('rtsp://')) {
        return reply.code(400).send({
          error: 'URL inv√°lida',
          message: 'URL RTSP deve come√ßar com rtsp://'
        });
      }
      cameraData.rtspUrl = rtspUrl;
    } else if (rtmpUrl) {
      // Se foi fornecido rtmpUrl mas n√£o come√ßa com rtmp://
      if (!url.startsWith('rtmp://')) {
        return reply.code(400).send({
          error: 'URL inv√°lida',
          message: 'URL RTMP deve come√ßar com rtmp://'
        });
      }
      cameraData.rtmpUrl = rtmpUrl;
      // WORKAROUND: Como a constraint NOT NULL ainda existe, colocar string vazia em rtspUrl
      cameraData.rtspUrl = '';
    }
    
    // DEBUG: Log dos dados que ser√£o inseridos
    console.log('üîç Dados para inser√ß√£o:', JSON.stringify(cameraData, null, 2));
    
    // Apenas admins e integradores podem criar c√¢meras
    if (role === 'CLIENT') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Clientes n√£o podem adicionar c√¢meras diretamente'
      });
    }
    
    let integratorId;
    
    if (role === 'INTEGRATOR') {
      // Se for integrador, buscar o ID do integrador usando Supabase
      const { data: integrator, error } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (error || !integrator) {
        console.error('‚ùå Integrador n√£o encontrado:', error);
        return reply.code(400).send({
          error: 'Integrador n√£o encontrado',
          message: 'Usu√°rio integrador n√£o possui registro na tabela integradores'
        });
      }
      
      integratorId = integrator.id;
    } else if (role === 'ADMIN') {
      // Admin precisa especificar um integrador - buscar o primeiro dispon√≠vel se n√£o especificado
      if (request.body.integratorId) {
        integratorId = request.body.integratorId;
      } else {
        // Buscar o primeiro integrador dispon√≠vel
        const { data: firstIntegrator, error } = await supabase
          .from('integrators')
          .select('id')
          .limit(1)
          .single();
        
        if (error || !firstIntegrator) {
          return reply.code(400).send({
            error: 'Integrador necess√°rio',
            message: 'Nenhum integrador encontrado. √â necess√°rio especificar um integrador.'
          });
        }
        
        integratorId = firstIntegrator.id;
      }
    }

    // Adicionar integradorId aos dados
    cameraData.integratorId = integratorId;

    // Verificar se o cliente existe
    console.log('üîç Verificando se cliente existe...', clientId);
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('id, name')
      .eq('id', clientId)
      .single();
    
    let finalClient = client;
    
    if (clientError || !client) {
      console.error('‚ùå Cliente n√£o encontrado:', clientError);
      
      // Buscar o primeiro cliente dispon√≠vel como fallback
      const { data: availableClients } = await supabase
        .from('clients')
        .select('id, name')
        .limit(1)
        .single();
      
      if (availableClients) {
        console.log('üîÑ Usando cliente fallback:', availableClients.name);
        finalClient = availableClients;
        // Atualizar o clientId para usar o cliente real
        cameraData.clientId = availableClients.id;
      } else {
        console.log('üë• Clientes dispon√≠veis: nenhum encontrado');
      return reply.code(400).send({
          error: 'Nenhum cliente dispon√≠vel',
          message: 'N√£o h√° clientes cadastrados no sistema'
      });
      }
    } else {
      console.log('‚úÖ Cliente encontrado:', client.name);
    }

    // Criar c√¢mera no banco usando Supabase
    const { data: camera, error } = await supabase
      .from('cameras')
      .insert([cameraData])
      .select(`
        *,
        clients:clientId (name),
        integrators:integratorId (name)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erro ao criar c√¢mera no Supabase:', error);
      return reply.status(500).send({ 
        error: 'Erro interno',
        message: `Erro no banco de dados: ${error.message || 'N√£o foi poss√≠vel criar a c√¢mera'}`
      });
    }

    console.log('‚úÖ C√¢mera criada com sucesso:', camera.id);

    // Criar configura√ß√£o de reten√ß√£o se retentionDays foi especificado
    if (retentionDays && retentionDays !== 7) {
      const { error: retentionError } = await supabase
        .from('retention_settings')
        .insert([{
          cameraId: camera.id,
          days: retentionDays
        }]);
      
      if (retentionError) {
        console.error('‚ö†Ô∏è Erro ao criar configura√ß√£o de reten√ß√£o:', retentionError);
        // N√£o falhar a cria√ß√£o da c√¢mera por causa disso
      }
    }

    return reply.status(201).send({
      message: 'C√¢mera criada com sucesso',
      camera
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar c√¢mera:', error);
    return reply.status(500).send({ 
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel criar a c√¢mera'
    });
  }
}

/**
 * Atualiza uma c√¢mera existente
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function updateCamera(request, reply) {
  try {
    const { id } = request.params;
    const { role, id: userId } = request.user;
    const updateData = request.body;
    
    // Buscar a c√¢mera
    const { data: camera } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', id)
      .single();
    
    if (!camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para editar esta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Clientes n√£o podem editar c√¢meras'
      });
    }
    
    // Atualizar a c√¢mera
    const { data: updatedCamera, error } = await supabase
      .from('cameras')
      .update(updateData)
      .eq('id', id)
      .select()
      .single();
    
    if (error) {
      console.error('Erro ao atualizar c√¢mera:', error);
      return reply.code(500).send({
        error: 'Erro interno',
        message: 'N√£o foi poss√≠vel atualizar a c√¢mera'
      });
    }
    
    return reply.code(200).send({
      message: 'C√¢mera atualizada com sucesso',
      camera: updatedCamera
    });
    
  } catch (error) {
    console.error('Erro ao atualizar c√¢mera:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel atualizar a c√¢mera'
    });
  }
}

/**
 * Remove uma c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function deleteCamera(request, reply) {
  try {
    const { id } = request.params;
    const { role, id: userId } = request.user;
    
    // Buscar a c√¢mera
    const { data: camera } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', id)
      .single();
    
    if (!camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para excluir esta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Clientes n√£o podem excluir c√¢meras'
      });
    }
    
    // Excluir configura√ß√µes relacionadas primeiro
    await supabase.from('retention_settings').delete().eq('cameraId', id);
    await supabase.from('motion_detection_configs').delete().eq('cameraId', id);
    await supabase.from('camera_streams').delete().eq('cameraId', id);
    
    // Excluir a c√¢mera
    const { error } = await supabase
      .from('cameras')
      .delete()
      .eq('id', id);
    
    if (error) {
      console.error('Erro ao excluir c√¢mera:', error);
      return reply.code(500).send({
        error: 'Erro interno',
        message: 'N√£o foi poss√≠vel excluir a c√¢mera'
      });
    }
    
    return reply.code(200).send({
      message: 'C√¢mera exclu√≠da com sucesso'
    });
    
  } catch (error) {
    console.error('Erro ao excluir c√¢mera:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel excluir a c√¢mera'
    });
  }
}

/**
 * Atualiza as configura√ß√µes de reten√ß√£o de uma c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function updateRetentionSetting(request, reply) {
  try {
    const { id: cameraId } = request.params;
    const { days } = request.body;
    const { role, id: userId } = request.user;
    
    console.log(`üóÉÔ∏è Atualizando reten√ß√£o da c√¢mera ${cameraId} para ${days} dias`);
    
    // Valida√ß√£o
    if (!days || days < 1 || days > 365) {
      return reply.code(400).send({
        error: 'Valor inv√°lido',
        message: 'Dias de reten√ß√£o deve ser entre 1 e 365'
      });
    }
    
    // Verificar se a c√¢mera existe
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para alterar esta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Clientes n√£o podem alterar configura√ß√µes de reten√ß√£o'
      });
    }
    
    // Verificar se j√° existe configura√ß√£o de reten√ß√£o
    const { data: existingRetention } = await supabase
      .from('retention_settings')
      .select('*')
      .eq('cameraId', cameraId)
      .single();
    
    let retentionResult;
    
    if (existingRetention) {
      // Atualizar configura√ß√£o existente
      const { data, error } = await supabase
        .from('retention_settings')
        .update({ days })
        .eq('cameraId', cameraId)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao atualizar reten√ß√£o:', error);
        return reply.code(500).send({
          error: 'Erro interno',
          message: 'N√£o foi poss√≠vel atualizar a configura√ß√£o de reten√ß√£o'
        });
      }
      
      retentionResult = data;
    } else {
      // Criar nova configura√ß√£o
      const { data, error } = await supabase
        .from('retention_settings')
        .insert([{ cameraId, days }])
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao criar reten√ß√£o:', error);
        return reply.code(500).send({
          error: 'Erro interno',
          message: 'N√£o foi poss√≠vel criar a configura√ß√£o de reten√ß√£o'
        });
      }
      
      retentionResult = data;
    }
    
    console.log('‚úÖ Configura√ß√£o de reten√ß√£o atualizada com sucesso');
    
    return reply.code(200).send({
      message: 'Configura√ß√£o de reten√ß√£o atualizada com sucesso',
      retention: retentionResult
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar configura√ß√£o de reten√ß√£o:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel atualizar a configura√ß√£o de reten√ß√£o'
    });
  }
}

/**
 * Busca configura√ß√µes de alerta para uma c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function getAlertConfigurations(request, reply) {
  try {
    const { id: cameraId } = request.params;
    const { role, id: userId } = request.user;
    
    console.log(`üìß Buscando configura√ß√µes de alerta para c√¢mera ${cameraId}`);
    
    // Verificar se a c√¢mera existe e se o usu√°rio tem acesso
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para acessar esta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      const { data: client } = await supabase
        .from('clients')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!client || camera.clientId !== client.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para acessar esta c√¢mera'
        });
      }
    }
    
    // Buscar configura√ß√µes de alerta
    const { data: alertConfigs, error } = await supabase
      .from('alert_configurations')
      .select('*')
      .eq('cameraId', cameraId);
    
    if (error) {
      console.error('‚ùå Erro ao buscar configura√ß√µes de alerta:', error);
      return reply.code(500).send({
        error: 'Erro interno',
        message: 'N√£o foi poss√≠vel buscar as configura√ß√µes de alerta'
      });
    }
    
    console.log(`‚úÖ Encontradas ${alertConfigs.length} configura√ß√µes de alerta`);
    
    return reply.code(200).send(alertConfigs);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar configura√ß√µes de alerta:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel buscar as configura√ß√µes de alerta'
    });
  }
}

/**
 * Cria uma nova configura√ß√£o de alerta
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function createAlertConfiguration(request, reply) {
  try {
    const { cameraId, emailAddresses, notifyOnline = true, notifyOffline = true } = request.body;
    const { role, id: userId } = request.user;
    
    console.log(`üìß Criando configura√ß√£o de alerta para c√¢mera ${cameraId}`);
    
    // Verificar se a c√¢mera existe
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes (apenas integradores e admins podem criar)
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para configurar alertas desta c√¢mera'
        });
      }
    } else if (role !== 'ADMIN') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Apenas integradores e admins podem criar configura√ß√µes de alerta'
      });
    }
    
    // Criar configura√ß√£o de alerta
    const { data: alertConfig, error } = await supabase
      .from('alert_configurations')
      .insert([{
        cameraId,
        userId,
        emailAddresses,
        notifyOnline,
        notifyOffline,
        createdBy: userId
      }])
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao criar configura√ß√£o de alerta:', error);
      return reply.code(500).send({
        error: 'Erro interno',
        message: 'N√£o foi poss√≠vel criar a configura√ß√£o de alerta'
      });
    }
    
    console.log('‚úÖ Configura√ß√£o de alerta criada com sucesso');
    
    return reply.code(201).send(alertConfig);
    
  } catch (error) {
    console.error('‚ùå Erro ao criar configura√ß√£o de alerta:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel criar a configura√ß√£o de alerta'
    });
  }
}

/**
 * Atualiza uma configura√ß√£o de alerta existente
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function updateAlertConfiguration(request, reply) {
  try {
    const { id: configId } = request.params;
    const updateData = request.body;
    const { role, id: userId } = request.user;
    
    console.log(`üìß Atualizando configura√ß√£o de alerta ${configId}`);
    
    // Buscar configura√ß√£o existente
    const { data: existingConfig, error: configError } = await supabase
      .from('alert_configurations')
      .select('*, cameras(*)')
      .eq('id', configId)
      .single();
    
    if (configError || !existingConfig) {
      return reply.code(404).send({
        error: 'Configura√ß√£o n√£o encontrada',
        message: 'Configura√ß√£o de alerta n√£o encontrada'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || existingConfig.cameras.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para alterar esta configura√ß√£o'
        });
      }
    } else if (role !== 'ADMIN') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Apenas integradores e admins podem alterar configura√ß√µes de alerta'
      });
    }
    
    // Atualizar configura√ß√£o
    const { data: updatedConfig, error } = await supabase
      .from('alert_configurations')
      .update(updateData)
      .eq('id', configId)
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao atualizar configura√ß√£o de alerta:', error);
      return reply.code(500).send({
        error: 'Erro interno',
        message: 'N√£o foi poss√≠vel atualizar a configura√ß√£o de alerta'
      });
    }
    
    console.log('‚úÖ Configura√ß√£o de alerta atualizada com sucesso');
    
    return reply.code(200).send(updatedConfig);
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar configura√ß√£o de alerta:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel atualizar a configura√ß√£o de alerta'
    });
  }
}

/**
 * Exclui uma configura√ß√£o de alerta
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function deleteAlertConfiguration(request, reply) {
  try {
    const { id: configId } = request.params;
    const { role, id: userId } = request.user;
    
    console.log(`üìß Excluindo configura√ß√£o de alerta ${configId}`);
    
    // Buscar configura√ß√£o existente
    const { data: existingConfig, error: configError } = await supabase
      .from('alert_configurations')
      .select('*, cameras(*)')
      .eq('id', configId)
      .single();
    
    if (configError || !existingConfig) {
      return reply.code(404).send({
        error: 'Configura√ß√£o n√£o encontrada',
        message: 'Configura√ß√£o de alerta n√£o encontrada'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || existingConfig.cameras.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para excluir esta configura√ß√£o'
        });
      }
    } else if (role !== 'ADMIN') {
      return reply.code(403).send({
        error: 'Permiss√£o negada',
        message: 'Apenas integradores e admins podem excluir configura√ß√µes de alerta'
      });
    }
    
    // Excluir configura√ß√£o
    const { error } = await supabase
      .from('alert_configurations')
      .delete()
      .eq('id', configId);
    
    if (error) {
      console.error('‚ùå Erro ao excluir configura√ß√£o de alerta:', error);
      return reply.code(500).send({
        error: 'Erro interno',
        message: 'N√£o foi poss√≠vel excluir a configura√ß√£o de alerta'
      });
    }
    
    console.log('‚úÖ Configura√ß√£o de alerta exclu√≠da com sucesso');
    
    return reply.code(200).send({
      success: true,
      message: 'Configura√ß√£o de alerta exclu√≠da com sucesso'
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao excluir configura√ß√£o de alerta:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel excluir a configura√ß√£o de alerta'
    });
  }
}

/**
 * Verifica o status real de uma c√¢mera testando a URL RTSP
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function checkCameraStatus(request, reply) {
  try {
    console.log('üîç Fun√ß√£o checkCameraStatus chamada');
    
    return reply.code(200).send({
      message: 'Teste simples funcionando',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Erro na fun√ß√£o checkCameraStatus:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'Erro na fun√ß√£o de teste'
    });
  }
}

/**
 * Captura um snapshot da c√¢mera via proxy para evitar problemas de CORS
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function captureSnapshot(request, reply) {
  try {
    const { id: cameraId } = request.params;
    const { role, id: userId } = request.user;
    
    console.log(`üì∏ Capturando snapshot da c√¢mera ${cameraId}`);
    
    // Verificar se a c√¢mera existe
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para acessar esta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      const { data: client } = await supabase
        .from('clients')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!client || camera.clientId !== client.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para acessar esta c√¢mera'
        });
      }
    }
    
    if (!camera.rtspUrl) {
      return reply.code(400).send({
        error: 'URL RTSP n√£o configurada',
        message: 'Esta c√¢mera n√£o possui URL RTSP configurada'
      });
    }
    
    // Extrair credenciais da URL RTSP para gerar URL de snapshot
    const urlPattern = /rtsp:\/\/([^:]+):([^@]+)@([^:]+):(\d+)(.*)/;
    const match = camera.rtspUrl.match(urlPattern);
    
    if (!match) {
      return reply.code(400).send({
        error: 'URL RTSP inv√°lida',
        message: 'Formato da URL RTSP n√£o √© suportado'
      });
    }
    
    const [, username, password, host, port] = match;
    
    // Tentar diferentes URLs de snapshot comuns
    const snapshotUrls = [
      `http://${username}:${password}@${host}/cgi-bin/snapshot.cgi`,
      `http://${username}:${password}@${host}/snapshot.jpg`,
      `http://${username}:${password}@${host}/jpg/image.jpg`,
      `http://${username}:${password}@${host}/axis-cgi/jpg/image.cgi`
    ];
    
    console.log(`üì∏ Tentando capturar snapshot de ${host}...`);
    
    // Tentar cada URL de snapshot
    for (const snapshotUrl of snapshotUrls) {
      try {
        const response = await fetch(snapshotUrl, {
          timeout: 5000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; Camera-Monitor/1.0)'
          }
        });
        
        if (response.ok) {
          const imageBuffer = await response.arrayBuffer();
          const contentType = response.headers.get('content-type') || 'image/jpeg';
          
          // Retornar a imagem diretamente
          reply.header('Content-Type', contentType);
          reply.header('Cache-Control', 'no-cache, no-store, must-revalidate');
          reply.header('Pragma', 'no-cache');
          reply.header('Expires', '0');
          
          return reply.send(Buffer.from(imageBuffer));
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Falha na URL ${snapshotUrl}: ${error.message}`);
        continue;
      }
    }
    
    // Se nenhuma URL funcionou, retornar erro
    return reply.code(503).send({
      error: 'Snapshot indispon√≠vel',
      message: 'N√£o foi poss√≠vel capturar snapshot da c√¢mera. Verifique se a c√¢mera est√° online.'
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao capturar snapshot:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel capturar snapshot da c√¢mera'
    });
  }
}

/**
 * Inicia stream HLS para uma c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function startHLSStream(request, reply) {
  try {
    const { id: cameraId } = request.params;
    const { role, id: userId } = request.user;
    
    console.log(`üé¨ Solicita√ß√£o para iniciar stream HLS da c√¢mera ${cameraId}`);
    
    // Verificar se a c√¢mera existe
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para iniciar stream desta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      const { data: client } = await supabase
        .from('clients')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!client || camera.clientId !== client.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para iniciar stream desta c√¢mera'
        });
      }
    }
    
    // Verificar se a c√¢mera tem URL RTSP
    if (!camera.rtspUrl) {
      return reply.code(400).send({
        error: 'URL RTSP n√£o configurada',
        message: 'Esta c√¢mera n√£o possui URL RTSP configurada'
      });
    }
    
    // Determinar URL de stream (RTSP ou RTMP)
    let streamUrl = null;
    let protocol = null;
    
    if (camera.rtspUrl && camera.rtspUrl.trim() !== '') {
      streamUrl = camera.rtspUrl;
      protocol = 'RTSP';
      console.log(`üîµ Usando URL RTSP: ${streamUrl}`);
    } else if (camera.rtmpUrl && camera.rtmpUrl.trim() !== '') {
      streamUrl = camera.rtmpUrl;
      protocol = 'RTMP';
      console.log(`üî¥ Usando URL RTMP: ${streamUrl}`);
    } else {
      return reply.code(400).send({
        error: 'URLs de stream n√£o configuradas',
        message: 'Esta c√¢mera n√£o possui URL RTSP nem RTMP configurada'
      });
    }
    
    console.log(`üì° Protocolo detectado: ${protocol}, URL: ${streamUrl}`);
    
    // Verificar se o worker est√° dispon√≠vel
    const workerAvailable = await workerStreamingService.isWorkerAvailable();
    if (!workerAvailable) {
      return reply.code(503).send({
        error: 'Servi√ßo indispon√≠vel',
        message: 'Worker de streaming n√£o est√° dispon√≠vel'
      });
    }
    
    try {
      // Solicitar in√≠cio do stream ao worker com a URL apropriada
      const result = await workerStreamingService.startStreamWithUrl(cameraId, streamUrl, {
        quality: request.body?.quality || 'medium',
        protocol: protocol
      });
      
      // Atualizar hlsUrl no banco de dados
      if (result.success && result.data?.hlsUrl) {
        await supabase
          .from('cameras')
          .update({ 
            hlsUrl: result.data.hlsUrl,
            streamStatus: 'ACTIVE',
            status: 'online'
          })
          .eq('id', cameraId);
          
        console.log(`‚úÖ HLS URL atualizada no banco: ${result.data.hlsUrl}`);
      }
      
      return reply.code(200).send({
        success: true,
        message: `Stream HLS ${protocol} iniciado com sucesso`,
        protocol: protocol,
        streamUrl: streamUrl,
        data: result.data
      });
      
    } catch (workerError) {
      console.error(`‚ùå Erro do worker ao iniciar stream [${cameraId}]:`, workerError);
      return reply.code(500).send({
        error: 'Erro do worker',
        message: workerError.message || 'N√£o foi poss√≠vel iniciar o stream HLS'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao iniciar stream HLS:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel iniciar o stream HLS'
    });
  }
}

/**
 * Para stream HLS de uma c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function stopHLSStream(request, reply) {
  try {
    const { id: cameraId } = request.params;
    const { role, id: userId } = request.user;
    
    console.log(`üõë Solicita√ß√£o para parar stream HLS da c√¢mera ${cameraId}`);
    
    // Verificar se a c√¢mera existe
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    // Verificar permiss√µes
    if (role === 'INTEGRATOR') {
      const { data: integrator } = await supabase
        .from('integrators')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!integrator || camera.integratorId !== integrator.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para parar stream desta c√¢mera'
        });
      }
    } else if (role === 'CLIENT') {
      const { data: client } = await supabase
        .from('clients')
        .select('id')
        .eq('userId', userId)
        .single();
      
      if (!client || camera.clientId !== client.id) {
        return reply.code(403).send({
          error: 'Permiss√£o negada',
          message: 'Voc√™ n√£o tem permiss√£o para parar stream desta c√¢mera'
        });
      }
    }
    
    try {
      // Solicitar parada do stream ao worker
      const result = await workerStreamingService.stopStream(cameraId);
      
      return reply.code(200).send({
        success: true,
        message: 'Stream HLS parado com sucesso',
        data: result.data
      });
      
    } catch (workerError) {
      console.error(`‚ùå Erro do worker ao parar stream [${cameraId}]:`, workerError);
      return reply.code(500).send({
        error: 'Erro do worker',
        message: workerError.message || 'N√£o foi poss√≠vel parar o stream HLS'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao parar stream HLS:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel parar o stream HLS'
    });
  }
}

/**
 * Obt√©m status do stream HLS de uma c√¢mera
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function getHLSStreamStatus(request, reply) {
  try {
    const { id: cameraId } = request.params;
    
    // Verificar se a c√¢mera existe
    const { data: camera, error: cameraError } = await supabase
      .from('cameras')
      .select('*')
      .eq('id', cameraId)
      .single();
    
    if (cameraError || !camera) {
      return reply.code(404).send({
        error: 'C√¢mera n√£o encontrada',
        message: 'C√¢mera n√£o encontrada no sistema'
      });
    }
    
    try {
      // Obter status do stream do worker
      const result = await workerStreamingService.getStreamStatus(cameraId);
      
      return reply.code(200).send({
        success: true,
        data: result.data
      });
      
    } catch (workerError) {
      console.error(`‚ùå Erro do worker ao obter status [${cameraId}]:`, workerError);
      return reply.code(500).send({
        error: 'Erro do worker',
        message: workerError.message || 'N√£o foi poss√≠vel obter status do stream'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao obter status do stream HLS:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel obter status do stream'
    });
  }
}

/**
 * Lista todos os streams HLS ativos
 * @param {Object} request - Requisi√ß√£o
 * @param {Object} reply - Resposta
 */
async function getActiveHLSStreams(request, reply) {
  try {
    // Verificar se o worker est√° dispon√≠vel
    const workerAvailable = await workerStreamingService.isWorkerAvailable();
    if (!workerAvailable) {
      return reply.code(503).send({
        error: 'Servi√ßo indispon√≠vel',
        message: 'Worker de streaming n√£o est√° dispon√≠vel'
      });
    }
    
    try {
      // Obter streams ativos do worker
      const result = await workerStreamingService.getActiveStreams();
      
      return reply.code(200).send({
        success: true,
        data: result.data
      });
      
    } catch (workerError) {
      console.error('‚ùå Erro do worker ao listar streams ativos:', workerError);
      return reply.code(500).send({
        error: 'Erro do worker',
        message: workerError.message || 'N√£o foi poss√≠vel listar streams ativos'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao listar streams HLS ativos:', error);
    return reply.code(500).send({
      error: 'Erro interno',
      message: 'N√£o foi poss√≠vel listar streams ativos'
    });
  }
}

module.exports = {
  getCameras,
  getCameraById,
  createCamera,
  updateCamera,
  deleteCamera,
  updateRetentionSetting,
  getAlertConfigurations,
  createAlertConfiguration,
  updateAlertConfiguration,
  deleteAlertConfiguration,
  checkCameraStatus,
  captureSnapshot,
  startHLSStream,
  stopHLSStream,
  getHLSStreamStatus,
  getActiveHLSStreams
}; 